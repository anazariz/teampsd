{
  # These are the rules to set what Markdownlint is looking for
  "default": false,
  "MD001": true,
  "MD003": { "style": "atx_closed" },
  "MD007": { "indent": 4 },
  "no-hard-tabs": false,
  "whitespace": false
}

#This vignette describes the steps necessary to edit/add rules to this Markdownlint yaml/yml file.#
#For a video, go to this link: https://youtu.be/mPaXA1DlIlk

# 1) Looking through and understanding the built-in rules for Markdownlint#

# Letâ€™s first look at and understand the rules that are pre-baked into Markdownlint here: 
# https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md

#How to read the RULES.md
# Let's take a look at the first rule, MD001 - Header levels should only increment by one level at a time.
# We can see that there are sections broken down tags, aliases, and descriptions and code snippets of examples related to the rule.

# If we look at another rule, let's look at MD003 - Heading style.
# There is an additional section called 'parameters'.
# Within parameters, we see the main parameter being 'style' 
# and then choices regarding the parameter style such as:
# "consistent", "atx", "atx_closed", "setext", "setext_with_atx", "setext_with_atx_closed"; default "consistent"
# The description also includes code snippets that show you the definitions of each of the parameter choices. 


# 2) Convention for adding or editing rules

# For rules without parameters:

# Start with the rule number within quotation marks followed by a colon and then True
# I will use the first rule for example.
# "MD001": True

# For rules with paramters:

# Start with the rule number within quotation marks followed by a colon and 
# then curly brackets with the parameter name within quotation marks followed by a colon
# and lastly, the parameter option in quotation marks all within the curly brackets.
# I will use the first 3 for example.
# "MD003": { "style": "atx_closed" }

# 3) Testing the markdownlint yaml to see if the rules have been applied by using a pull request.

# Create a markdown file that tests the rules you added. 
# At least one rule should purposefully pass and one rule should purposefully fail with respect to the content in the markdown file.
# Create a pull request and you should notice a CI/Build near the bottom of the pull request where you could make a comment.
# Your build will fail with a red X, and click on details on the right.
# In the search log, type in your markdown file name to find it quickly within all the markdown files the linter is searching through.
# Identify the rules the linter looked for and where it detected markdown mistakes that occured. 
